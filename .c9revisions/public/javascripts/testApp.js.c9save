{"ts":1373304043330,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var camera, scene, renderer,mesh, material;\nvar controls;\nvar dna = 'ATCGGGATAGGGATGCCA';\nvar colors={\n    a:0x0000ff,\n    c:0x00ff00,\n    t:0xff0000,\n    g:0xff0f0f\n    };\n\ninit();\nanimate();\n\nfunction init() {\n\n    camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 1, 5000);\n    camera.position.z = 100;\n \n    scene = new THREE.Scene();\n    for(var i=0; i < dna.length; i++){\n        material = new THREE.MeshLambertMaterial( { color: colors[dna[i].toLowerCase()] } );\n        mesh = new THREE.Mesh( new THREE.SphereGeometry( 10, 16, 8 ),material );\n        mesh.position.set(20*i,0,0);\n        scene.add( mesh );\n    }\n    // material = new THREE.MeshLambertMaterial( { color: colors[dna[0].toLowerCase()] } );\n    // mesh = new THREE.Mesh( new THREE.SphereGeometry( 100, 16, 8 ),material );\n    // scene.add(mesh);\n    var ambient = new THREE.AmbientLight( 0x101010 );\n\tscene.add( ambient );\n\n\tdirectionalLight = new THREE.DirectionalLight( 0xffffff );\n\tdirectionalLight.position.set( 1, 1, 2 ).normalize();\n\tscene.add( directionalLight );\n    \n\n    renderer = new THREE.WebGLRenderer( { antialias: true } );\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.domElement.style.position = 'absolute';\n    document.getElementById('container').appendChild(renderer.domElement);\n\n    //\n\n    controls = new THREE.TrackballControls(camera, renderer.domElement);\n    controls.addEventListener( 'change', render );\n\n    window.addEventListener('resize', onWindowResize, false);\n\n}\n\nfunction transform(targets, duration) {\n\n    TWEEN.removeAll();\n\n    for (var i = 0; i < objects.length; i++) {\n\n        var object = objects[i];\n        var target = targets[i];\n\n        new TWEEN.Tween(object.position).to({\n            x: target.position.x,\n            y: target.position.y,\n            z: target.position.z\n        }, Math.random() * duration + duration).easing(TWEEN.Easing.Exponential.InOut).start();\n\n        new TWEEN.Tween(object.rotation).to({\n            x: target.rotation.x,\n            y: target.rotation.y,\n            z: target.rotation.z\n        }, Math.random() * duration + duration).easing(TWEEN.Easing.Exponential.InOut).start();\n\n    }\n\n    new TWEEN.Tween(this).to({}, duration * 2).onUpdate(render).start();\n\n}\n\nfunction onWindowResize() {\n\n    camera.aspect = window.innerWidth / window.innerHeight;\n    camera.updateProjectionMatrix();\n\n    renderer.setSize(window.innerWidth, window.innerHeight);\n\n}\n\nfunction animate() {\n\n    requestAnimationFrame(animate);\n\n    TWEEN.update();\n    controls.update();\n\n}\n\nfunction render() {\n\n    renderer.render(scene, camera);\n\n}"]],"start1":0,"start2":0,"length1":0,"length2":2642}]],"length":2642}
